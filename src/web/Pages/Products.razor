@page "/products"
@inject HttpClient _httpClient
@inject HubConnection _hubConnection;
@inject IProductService _productService;
@inject NavigationManager _navigationManager;

<h1>Products</h1>

<h2>Polling</h2>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var prd in products)

        {
            <tr>
                <td>@prd.Name</td>
                <td>@prd.Price</td>
            </tr>
        }
    </tbody>
</table>

<h2>SignalR</h2>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var prd in _productService.Products)

        {
            <tr>
                <td>@prd.Name</td>
                <td>@prd.Price</td>
                <td><button class="btn btn-primary" @onclick="(() => ShowProduct(prd.Id))"><i class="oi oi-pencil"></i></button></td>
            </tr>
        }
    </tbody>
</table>

<br />

<button class="btn btn-primary" @onclick="CreateProduct">Add Product</button>


@code {

    private List<Demo.SignalR.Web.Models.Product> products = new List<Demo.SignalR.Web.Models.Product>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            await _productService.GetProductsAsync();
            products = _productService.Products;
          

            //Set timer for non-signalR
            System.Timers.Timer t = new System.Timers.Timer();
            t.Interval = 10000;
            t.Elapsed += async (s, e) =>
            {
                products = await _httpClient.GetFromJsonAsync<List<Demo.SignalR.Web.Models.Product>>("/api/products") ?? new List<Demo.SignalR.Web.Models.Product>();
                await InvokeAsync(StateHasChanged);
            };
            t.Start();

            //SignalR
            _hubConnection.On<List<Demo.SignalR.Web.Models.Product>>("ProductUpdates", (pdt) =>
            {
                _productService.Products = pdt;
                StateHasChanged();
            });

            await _hubConnection.StartAsync().ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void ShowProduct(Guid id)
    {
        _navigationManager.NavigateTo($"/product/{id}");
    }

    private void CreateProduct()
    {
        _navigationManager.NavigateTo($"/product");
    }
}
